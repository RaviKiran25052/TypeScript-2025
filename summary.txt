npm init
npm i typescript --save-dev

creates tsconfig file = npx tsc --init

tsc main.ts = compile ts
node main.js = run js

"scripts": {
   "dev": "tsc main.ts && node -e \"require('fs').unlinkSync('main.js')\""
}

----------------------------------------------------------------------

npx create-react-app my-app --template typescript

----------------------------------------------------------------------

npm install -D tailwindcss@^3
npx tailwindcss init -p

content: ["./src/**/*.{js,ts,jsx,tsx}"]

@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------------------------------------

PRIMITIVE TYPES: number, string, boolean, null, undefined, void, never

number:
let num = 1 | 0 | -2 | 3.14 | -3.14 | Infinity | -Infinity

string:
let str = "hello" | 'world' | `${}`

boolean:
let bln = true | false

undefined:
let und = undefined
und = 2
und = "hi"

null:
let nl = null
nl = 4
nl = "hello"

-> in undefined and null, the type was "any", so we can reintialize to another datatype.

"void" is used when you're returning nothing from a function
"never" is used when we explicitly define that a function never returns

-----------------------------------------------------------------

UNION: " | "

let x: number | string = 4
x = "four"

----------------------------------------------------------------------

ARRAYS: in javascript the array is a collection of different datatypes

let arr = [1, "love", 3]
=> type is (string | number)
=> but you cannot perform operations

arr[0] + 1 ❌
=> throws error, as js was not sure that arr[0] was number or string

explicitly we can write as:
let arr: number[] = [1, 4, 3]
let arr: string[][] = [["Ravi", "Vinay"], ["Partha"], ["Bharath"]]

----------------------------------------------------------------------

TUPLE: Tuple is a fixed length array that has defined values for each position in the array

let std: [string, number] = ["Ravi", 554]
=> now we can access the indices as the type was defined

"Hi" + std[0]
std[1] + 2

let class: [number, string][] = [
	[544, "Bharath"],
	[545, "Partha"],
	[546, "Vinay"]
]

----------------------------------------------------------------------

LITERAL: Literal is a textual representation (notation)
of a value as it is written in source code

instance of a primitive type

let directions = "north" | "south" | "east" | "west"

directions = "north" ✔️
directions = "hello" ❌

----------------------------------------------------------------------

ENUM (Enumeration): Enums enables developers to establish a collection of named
constants (enumerators), each linked with an integer value.
- number enum
- string enum

enum Size {
	small,
	medium,
	large
}

var size: Size = Size.small (or) 0
=> small - 0
=> medium - 1
=> large - 2

we can set the starting value:
enum Size {
	small = 38,
	medium,
	large
}
=> small - 38
=> medium - 39
=> large - 40

enum Size {
	small = 7,
	medium = 11,
	large = 13
}

enum Directions {
	north = "UP",
	south = "DOWN",
	east = "RIGHT",
	west = "LEFT"
}

----------------------------------------------------------------------

ANY : to ignore type tracking for a variable

let x: any = 1
const y = x + 1
x.length

----------------------------------------------------------------------

UNKNOWN : we can explicitly define at the time of usage

let x: unknown = 12
x + 1 ❌
x.length ❌

// type assertion
let x: unknown = 12
if (typeof x == "number") {
	x + 1
} else if (typeof x == "string") {
	x.length
}

// type casting
let x: unknown = 12
const result = (x as number) + 1

----------------------------------------------------------------------

CHAINING (?) and BANG (!)

"Question mark" & "Exclamation point" operators allows us to
check and deal with undefined values within Typescript

const arr = [{name: "ravi"}, {name: "bharath"}, {name: "partha"}]

const ele = arr.pop().name ❌ = as it may be of type {name} | string
const ele = arr.pop()?.name ✔️ = if not undefined then assigns the value or assigns undefined.
-> type of ele = string | undefined
const ele = arr.pop()!.name ✔️ = forcing the ele not to get undefined, may crash the code if it is really undefined.
-> type of ele = string

? = checking and moving forward
! = forcing us to move forward

----------------------------------------------------------------------

FUNCTION Types:

function divide(a: number, b: number) {
	return a/b
}
// by default this funtion returns number
divide(4, 2)

function divide(a: number, b: number) : number | string {
	if (b == 0) return "invalid"
	return a/b
}
// here the function was returning number and string
divide(1, 0)

function showName(firstName: string, middleName?: string, lastName: string)
// here middleName type was: string | unknown

function showName(firstName: string, middleName: string = "middle", lastName: string)
// here we can set default value for middle name


function mul(a: number, b: number): number {
	return a * b
}
function div(a: number, b: number): number {
	return a/b
}
function applyFunc(
	funcs: ((a: number, b: number)=> number)[], 
	values: [number, number][]
) : number[] {
	const results: number[] = []
	// or
	// const results = [] as number[]
	for(let i = 0; i < funcs.length; i++) {
		const args = values[i]
		const result = funcs[i](args[0], args[1])
		results.push(result)
	}
	return results
}

applyFunc([mul, div], [[1,2],[6,3]])

----------------------------------------------------------------------

REST parameter:

function sum(...elements: number[]): number {
  let sum = 0
  elements.forEach(element => {
    sum += element
  })
	return sum
}
sum(1,2,3)
sum(4,5,6,7,8,9)

----------------------------------------------------------------------

OVERLOADING functions

function getLength(name: string): number;
function getLength(names: string[]): number[];

function getLength(nameOrNames: unknown): unknown {
	if (typeof nameOrNames == "string") {
		return nameOrNames.length
	} else if (Array.isArray(nameOrNames)) {
		const lengths: number[] = []
		nameOrNames.forEach(str => {
			lengths.push(str.length)
		})
		return lengths
	}
}

getLength("qwerty")
getLength(["Ravi", "Bharath", "Partha"])

----------------------------------------------------------------------

INTERFACES:

"Interfaces" is a programming structure/syntax that allows the
computer to enforce certain properties on an object (class)

interface Person {
	name: string;
	age: number;
	height?: number; // optional
	hello: () => void;
}
const person: Person = {
	name: "tim",
	age:23,
	hello: function () {
		console.log(this.name + " says Hi..")
	}
}

// inheritance
interface Employee extends Person {
	empId: number;
	salary: number;
}

const emp: Employee = {
  empId: 554,
  salary: 50000,
  name: "Ravi",
  age: 22,
  hello: function () {
    console.log(this.name + " says Hi..")
  }
}

// multiple inheritance
interface a extends b, c

----------------------------------------------------------------------
